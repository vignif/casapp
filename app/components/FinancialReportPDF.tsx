"use client";
import { Property } from "../lib/types";
import { getPortfolioMetrics, nextContractEndDate, performanceForProperty } from "../lib/calculations";
import jsPDF from "jspdf";

type Props = {
  properties: Property[];
  onExport?: () => void;
};

export default function FinancialReportPDF({ properties, onExport }: Props) {
  const portfolio = getPortfolioMetrics(properties);
  const nextExpiry = nextContractEndDate(properties);
  const currentDate = new Date().toLocaleDateString();

  const generatePDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);
    let yPosition = margin;
    let currentPage = 1;

    // Helper function to add text with word wrap and return new y position
    const addText = (text: string, x: number, y: number, maxWidth: number, lineHeight = 7, fontSize = 12, fontStyle: string = "normal") => {
      doc.setFontSize(fontSize);
      if (fontStyle === "bold") {
        doc.setFont("helvetica", "bold");
      } else {
        doc.setFont("helvetica", "normal");
      }
      
      const lines = doc.splitTextToSize(text, maxWidth);
      doc.text(lines, x, y);
      return y + (lines.length * lineHeight);
    };

    // Helper function to check if we need a new page
    const checkPageBreak = (requiredSpace: number) => {
      if (yPosition + requiredSpace > pageHeight - margin) {
        doc.addPage();
        yPosition = margin;
        currentPage++;
        return true;
      }
      return false;
    };

    // Helper function to add a section with title
    const addSection = (title: string, content: string[], titleFontSize = 16, contentFontSize = 12) => {
      // Check if we have space for the section
      const estimatedHeight = 10 + (content.length * 8);
      checkPageBreak(estimatedHeight);
      
      // Add section title
      yPosition = addText(title, margin, yPosition, contentWidth, 8, titleFontSize, "bold");
      yPosition += 5;
      
      // Add section content
      content.forEach(line => {
        if (line) {
          yPosition = addText(line, margin + 5, yPosition, contentWidth - 5, 7, contentFontSize);
          yPosition += 3;
        }
      });
      
      return yPosition + 5;
    };

    // Add header to each page
    const addHeader = () => {
      doc.setFontSize(10);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(100, 100, 100);
      doc.text("Real Estate Portfolio Financial Report", margin, 15);
      doc.text(`Generated on: ${currentDate}`, pageWidth - margin - doc.getTextWidth(`Generated on: ${currentDate}`), 15);
      doc.setTextColor(0, 0, 0);
    };

    // Add footer to each page
    const addFooter = (currentPage: number, totalPages: number) => {
      doc.setFontSize(8);
      doc.setFont("helvetica", "normal");
      doc.text(`Page ${currentPage} of ${totalPages}`, pageWidth - 30, pageHeight - 10);
      doc.text("Generated by Estate Manager", margin, pageHeight - 10);
    };

    // Set initial header
    addHeader();

    // Title
    doc.setFontSize(20);
    doc.setFont("helvetica", "bold");
    yPosition = addText("Real Estate Portfolio Financial Report", margin, yPosition + 10, contentWidth, 10);
    
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    yPosition = addText(`Generated on: ${currentDate}`, margin, yPosition, contentWidth);
    yPosition += 15;

    // Portfolio Overview
    const overviewContent = [
      `Total Portfolio Worth: €${portfolio.totalWorth.toLocaleString()}`,
      `Total Annual Revenue: €${portfolio.totalAnnualRevenue.toLocaleString()}`,
      `Net Annual Income: €${portfolio.netAnnualIncome.toLocaleString()}`,
      `Net Performance: ${portfolio.netPerformance.toFixed(1)}%`,
      `Yearly Maintenance Costs: €${portfolio.yearlyMaintenance.toLocaleString()}`,
      `Next Contract Expiration: ${nextExpiry ? nextExpiry.toISOString().slice(0, 10) : "None"}`,
    ];
    yPosition = addSection("Portfolio Overview", overviewContent);

    // Property Details
    yPosition = addSection("Property Details", [], 16, 12);
    yPosition += 5;

    properties.forEach((property, index) => {
      const performance = performanceForProperty(property);
      const hasTenant = !!property.tenant;
      const maintenanceTotal = property.maintenance.reduce((sum, m) => sum + m.cost, 0);
      const unpaidMaintenance = property.maintenance.filter(m => !m.paid).reduce((sum, m) => sum + m.cost, 0);

      const propertyContent = [
        `Address: ${property.address}, ${property.city}, ${property.country}`,
        `Type: ${property.propertyType} | Size: ${property.sizeSqm} m² | Bedrooms: ${property.bedrooms} | Bathrooms: ${property.bathrooms}`,
        `Value: ${property.value ? `€${property.value.toLocaleString()}` : "Not set"}`,
        `Status: ${hasTenant ? "Occupied" : "Vacant"}`,
        hasTenant ? `Tenant: ${property.tenant?.tenantName} | Rent: €${property.tenant?.monthlyRent?.toLocaleString()}/month` : "",
        hasTenant && property.tenant?.endDate ? `Contract End: ${property.tenant.endDate}` : "",
        `Maintenance Total: €${maintenanceTotal.toLocaleString()} | Unpaid: €${unpaidMaintenance.toLocaleString()}`,
        performance ? `Performance: ${performance.toFixed(1)}%` : "Performance: N/A",
        property.notes ? `Notes: ${property.notes}` : "",
      ].filter(Boolean);

      // Check if we need a new page for this property
      const estimatedPropertyHeight = 20 + (propertyContent.length * 10);
      if (checkPageBreak(estimatedPropertyHeight)) {
        addHeader();
      }

      // Add property title
      yPosition = addText(`${index + 1}. ${property.name}`, margin, yPosition, contentWidth, 8, 14, "bold");
      yPosition += 3;

      // Add property content
      propertyContent.forEach(line => {
        if (line) {
          yPosition = addText(line, margin + 5, yPosition, contentWidth - 5);
          yPosition += 3;
        }
      });
      
      yPosition += 10;
    });

    // Summary Statistics
    const summaryContent = [
      `Total Properties: ${properties.length}`,
      `Occupied Properties: ${properties.filter(p => !!p.tenant).length}`,
      `Vacant Properties: ${properties.filter(p => !p.tenant).length}`,
      `Average Property Value: €${properties.length > 0 ? Math.round(portfolio.totalWorth / properties.length).toLocaleString() : "0"}`,
      `Average Monthly Rent: €${properties.filter(p => p.tenant).length > 0 ? Math.round(portfolio.totalMonthlyRevenue / properties.filter(p => p.tenant).length).toLocaleString() : "0"}`,
    ];
    
    // Check if we need a new page for the summary
    checkPageBreak(50);
    yPosition = addSection("Summary Statistics", summaryContent);

    // Add footers to all pages
    const totalPages = doc.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      addFooter(i, totalPages);
      
      // Add header to all pages except the first (already has it)
      if (i > 1) {
        addHeader();
      }
    }

    // Save the PDF
    const fileName = `real-estate-report-${new Date().toISOString().slice(0, 10)}.pdf`;
    doc.save(fileName);
    
    if (onExport) onExport();
  };

  return (
    <button
      onClick={generatePDF}
      className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
    >
      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      Export PDF Report
    </button>
  );
}