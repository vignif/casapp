generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Property {
  id           String            @id @default(cuid())
  name         String
  address      String
  city         String
  country      String
  propertyType String
  bedrooms     Int
  bathrooms    Int
  sizeSqm      Int
  value        Int?
  notes        String?
  ownerEmail   String?

  maintenance  MaintenanceItem[]
  calendar     CalendarEvent[]
  tenant       TenantContract?
  documents    PropertyDocument[]

  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model MaintenanceItem {
  id          String   @id @default(cuid())
  date        DateTime
  category    String
  description String
  cost        Int
  paid        Boolean  @default(false)

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CalendarEvent {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  notes       String?

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TenantContract {
  id           String   @id @default(cuid())
  tenantName   String
  email        String?
  phone        String?
  startDate    DateTime
  endDate      DateTime?
  monthlyRent  Int
  depositHeld  Int

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @unique

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PropertyDocument {
  id          String   @id @default(cuid())
  name        String
  type        String   // "ownership", "energy_cert", "insurance", "other"
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  description String?

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


